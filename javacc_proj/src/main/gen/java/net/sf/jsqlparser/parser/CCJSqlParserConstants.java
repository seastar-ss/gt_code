/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserConstants.java */
package net.sf.jsqlparser.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CCJSqlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int K_ACTION = 2;
  /** RegularExpression Id. */
  int K_ADD = 3;
  /** RegularExpression Id. */
  int K_ADVANCE = 4;
  /** RegularExpression Id. */
  int K_AGAINST = 5;
  /** RegularExpression Id. */
  int K_ALGORITHM = 6;
  /** RegularExpression Id. */
  int K_ALL = 7;
  /** RegularExpression Id. */
  int K_ALTER = 8;
  /** RegularExpression Id. */
  int K_AND = 9;
  /** RegularExpression Id. */
  int K_AND_OPERATOR = 10;
  /** RegularExpression Id. */
  int K_ANY = 11;
  /** RegularExpression Id. */
  int K_AS = 12;
  /** RegularExpression Id. */
  int K_ASC = 13;
  /** RegularExpression Id. */
  int K_BEGIN = 14;
  /** RegularExpression Id. */
  int K_BETWEEN = 15;
  /** RegularExpression Id. */
  int K_BINARY = 16;
  /** RegularExpression Id. */
  int K_BIT = 17;
  /** RegularExpression Id. */
  int K_BOTH = 18;
  /** RegularExpression Id. */
  int K_BY = 19;
  /** RegularExpression Id. */
  int K_BYTE = 20;
  /** RegularExpression Id. */
  int K_CALL = 21;
  /** RegularExpression Id. */
  int K_CASCADE = 22;
  /** RegularExpression Id. */
  int K_CASE = 23;
  /** RegularExpression Id. */
  int K_CAST = 24;
  /** RegularExpression Id. */
  int K_CHARACTER = 25;
  /** RegularExpression Id. */
  int K_CHANGE = 26;
  /** RegularExpression Id. */
  int K_CHECK = 27;
  /** RegularExpression Id. */
  int K_CHAR = 28;
  /** RegularExpression Id. */
  int K_COLLATE = 29;
  /** RegularExpression Id. */
  int K_COLLECTION = 30;
  /** RegularExpression Id. */
  int K_COLUMN = 31;
  /** RegularExpression Id. */
  int K_COLUMNS = 32;
  /** RegularExpression Id. */
  int K_COMMIT = 33;
  /** RegularExpression Id. */
  int K_COMMENT = 34;
  /** RegularExpression Id. */
  int K_CONNECT = 35;
  /** RegularExpression Id. */
  int K_CONSTRAINT = 36;
  /** RegularExpression Id. */
  int K_CREATE = 37;
  /** RegularExpression Id. */
  int K_CROSS = 38;
  /** RegularExpression Id. */
  int K_CURRENT = 39;
  /** RegularExpression Id. */
  int K_DATE = 40;
  /** RegularExpression Id. */
  int K_DATETIMELITERAL = 41;
  /** RegularExpression Id. */
  int K_DATE_LITERAL = 42;
  /** RegularExpression Id. */
  int K_DEFERRABLE = 43;
  /** RegularExpression Id. */
  int K_DELAYED = 44;
  /** RegularExpression Id. */
  int K_DELETE = 45;
  /** RegularExpression Id. */
  int K_DESC = 46;
  /** RegularExpression Id. */
  int K_DESCRIBE = 47;
  /** RegularExpression Id. */
  int K_DISABLE = 48;
  /** RegularExpression Id. */
  int K_DISTINCT = 49;
  /** RegularExpression Id. */
  int K_DIV = 50;
  /** RegularExpression Id. */
  int K_DO = 51;
  /** RegularExpression Id. */
  int K_DOUBLE = 52;
  /** RegularExpression Id. */
  int K_DROP = 53;
  /** RegularExpression Id. */
  int K_DUPLICATE = 54;
  /** RegularExpression Id. */
  int K_ELSE = 55;
  /** RegularExpression Id. */
  int K_ENABLE = 56;
  /** RegularExpression Id. */
  int K_END = 57;
  /** RegularExpression Id. */
  int K_ESCAPE = 58;
  /** RegularExpression Id. */
  int K_EXCEPT = 59;
  /** RegularExpression Id. */
  int K_EXCLUDE = 60;
  /** RegularExpression Id. */
  int K_EXEC = 61;
  /** RegularExpression Id. */
  int K_EXECUTE = 62;
  /** RegularExpression Id. */
  int K_EXISTS = 63;
  /** RegularExpression Id. */
  int K_EXPLAIN = 64;
  /** RegularExpression Id. */
  int K_EXTRACT = 65;
  /** RegularExpression Id. */
  int K_FETCH = 66;
  /** RegularExpression Id. */
  int K_FIRST = 67;
  /** RegularExpression Id. */
  int K_FALSE = 68;
  /** RegularExpression Id. */
  int K_FLOAT = 69;
  /** RegularExpression Id. */
  int K_FOLLOWING = 70;
  /** RegularExpression Id. */
  int K_FOR = 71;
  /** RegularExpression Id. */
  int K_FORCE = 72;
  /** RegularExpression Id. */
  int K_FOREIGN = 73;
  /** RegularExpression Id. */
  int K_FROM = 74;
  /** RegularExpression Id. */
  int K_FULL = 75;
  /** RegularExpression Id. */
  int K_FULLTEXT = 76;
  /** RegularExpression Id. */
  int K_GROUP = 77;
  /** RegularExpression Id. */
  int K_GROUPING = 78;
  /** RegularExpression Id. */
  int K_GROUP_CONCAT = 79;
  /** RegularExpression Id. */
  int K_HAVING = 80;
  /** RegularExpression Id. */
  int K_HIGH_PRIORITY = 81;
  /** RegularExpression Id. */
  int K_HOPPING = 82;
  /** RegularExpression Id. */
  int K_IF = 83;
  /** RegularExpression Id. */
  int K_IIF = 84;
  /** RegularExpression Id. */
  int K_IGNORE = 85;
  /** RegularExpression Id. */
  int K_ILIKE = 86;
  /** RegularExpression Id. */
  int K_IN = 87;
  /** RegularExpression Id. */
  int K_INDEX = 88;
  /** RegularExpression Id. */
  int K_INNER = 89;
  /** RegularExpression Id. */
  int K_INSERT = 90;
  /** RegularExpression Id. */
  int K_INTEGER = 91;
  /** RegularExpression Id. */
  int K_INTERSECT = 92;
  /** RegularExpression Id. */
  int K_INTERVAL = 93;
  /** RegularExpression Id. */
  int K_INTO = 94;
  /** RegularExpression Id. */
  int K_IS = 95;
  /** RegularExpression Id. */
  int K_ISNULL = 96;
  /** RegularExpression Id. */
  int K_JOIN = 97;
  /** RegularExpression Id. */
  int K_KEEP = 98;
  /** RegularExpression Id. */
  int K_KEY = 99;
  /** RegularExpression Id. */
  int K_FN = 100;
  /** RegularExpression Id. */
  int K_LAST = 101;
  /** RegularExpression Id. */
  int K_LATERAL = 102;
  /** RegularExpression Id. */
  int K_LEADING = 103;
  /** RegularExpression Id. */
  int K_LEFT = 104;
  /** RegularExpression Id. */
  int K_LIKE = 105;
  /** RegularExpression Id. */
  int K_LIMIT = 106;
  /** RegularExpression Id. */
  int K_LONG = 107;
  /** RegularExpression Id. */
  int K_LOW_PRIORITY = 108;
  /** RegularExpression Id. */
  int K_MATCH = 109;
  /** RegularExpression Id. */
  int K_MATCHED = 110;
  /** RegularExpression Id. */
  int K_MATERIALIZED = 111;
  /** RegularExpression Id. */
  int K_MERGE = 112;
  /** RegularExpression Id. */
  int K_MINUS = 113;
  /** RegularExpression Id. */
  int K_MODIFY = 114;
  /** RegularExpression Id. */
  int K_NATURAL = 115;
  /** RegularExpression Id. */
  int K_NEXT = 116;
  /** RegularExpression Id. */
  int K_NEXTVAL = 117;
  /** RegularExpression Id. */
  int K_NO = 118;
  /** RegularExpression Id. */
  int K_NOCYCLE = 119;
  /** RegularExpression Id. */
  int K_NOT = 120;
  /** RegularExpression Id. */
  int K_NOVALIDATE = 121;
  /** RegularExpression Id. */
  int K_NULL = 122;
  /** RegularExpression Id. */
  int K_NULLS = 123;
  /** RegularExpression Id. */
  int K_OF = 124;
  /** RegularExpression Id. */
  int K_OFFSET = 125;
  /** RegularExpression Id. */
  int K_ON = 126;
  /** RegularExpression Id. */
  int K_ONLY = 127;
  /** RegularExpression Id. */
  int K_OPEN = 128;
  /** RegularExpression Id. */
  int K_OR = 129;
  /** RegularExpression Id. */
  int K_ORDER = 130;
  /** RegularExpression Id. */
  int K_OUTER = 131;
  /** RegularExpression Id. */
  int K_OVER = 132;
  /** RegularExpression Id. */
  int K_OPTIMIZE = 133;
  /** RegularExpression Id. */
  int K_PARTITION = 134;
  /** RegularExpression Id. */
  int K_PATH = 135;
  /** RegularExpression Id. */
  int K_PERCENT = 136;
  /** RegularExpression Id. */
  int K_PIVOT = 137;
  /** RegularExpression Id. */
  int K_PLACING = 138;
  /** RegularExpression Id. */
  int K_PRECEDING = 139;
  /** RegularExpression Id. */
  int K_PRECISION = 140;
  /** RegularExpression Id. */
  int K_PRIMARY = 141;
  /** RegularExpression Id. */
  int K_PRIOR = 142;
  /** RegularExpression Id. */
  int K_RANGE = 143;
  /** RegularExpression Id. */
  int K_RECURSIVE = 144;
  /** RegularExpression Id. */
  int K_REFERENCES = 145;
  /** RegularExpression Id. */
  int K_REGEXP = 146;
  /** RegularExpression Id. */
  int K_RLIKE = 147;
  /** RegularExpression Id. */
  int K_REPLACE = 148;
  /** RegularExpression Id. */
  int K_RESTRICT = 149;
  /** RegularExpression Id. */
  int K_RETURNING = 150;
  /** RegularExpression Id. */
  int K_RIGHT = 151;
  /** RegularExpression Id. */
  int K_ROW = 152;
  /** RegularExpression Id. */
  int K_ROWS = 153;
  /** RegularExpression Id. */
  int K_SELECT = 154;
  /** RegularExpression Id. */
  int K_SEMI = 155;
  /** RegularExpression Id. */
  int K_SEPARATOR = 156;
  /** RegularExpression Id. */
  int K_SESSION = 157;
  /** RegularExpression Id. */
  int K_SET = 158;
  /** RegularExpression Id. */
  int K_SETS = 159;
  /** RegularExpression Id. */
  int K_SHOW = 160;
  /** RegularExpression Id. */
  int K_SIBLINGS = 161;
  /** RegularExpression Id. */
  int K_SIMILAR = 162;
  /** RegularExpression Id. */
  int K_SIZE = 163;
  /** RegularExpression Id. */
  int K_SKIP = 164;
  /** RegularExpression Id. */
  int K_SOME = 165;
  /** RegularExpression Id. */
  int K_START = 166;
  /** RegularExpression Id. */
  int K_STRING = 167;
  /** RegularExpression Id. */
  int K_TABLE = 168;
  /** RegularExpression Id. */
  int K_TABLESPACE = 169;
  /** RegularExpression Id. */
  int K_THEN = 170;
  /** RegularExpression Id. */
  int K_TEMP = 171;
  /** RegularExpression Id. */
  int K_TEMPORARY = 172;
  /** RegularExpression Id. */
  int K_TIME_KEY_EXPR = 173;
  /** RegularExpression Id. */
  int K_TO = 174;
  /** RegularExpression Id. */
  int K_TOP = 175;
  /** RegularExpression Id. */
  int K_TRAILING = 176;
  /** RegularExpression Id. */
  int K_TRUNCATE = 177;
  /** RegularExpression Id. */
  int K_TRUE = 178;
  /** RegularExpression Id. */
  int K_TUMBLING = 179;
  /** RegularExpression Id. */
  int K_TYPE = 180;
  /** RegularExpression Id. */
  int K_UNBOUNDED = 181;
  /** RegularExpression Id. */
  int K_UNION = 182;
  /** RegularExpression Id. */
  int K_UNIQUE = 183;
  /** RegularExpression Id. */
  int K_UNLOGGED = 184;
  /** RegularExpression Id. */
  int K_UPDATE = 185;
  /** RegularExpression Id. */
  int K_UPSERT = 186;
  /** RegularExpression Id. */
  int K_USE = 187;
  /** RegularExpression Id. */
  int K_SQL_CALC_FOUND_ROWS = 188;
  /** RegularExpression Id. */
  int K_SQL_NO_CACHE = 189;
  /** RegularExpression Id. */
  int K_USING = 190;
  /** RegularExpression Id. */
  int K_SIGNED = 191;
  /** RegularExpression Id. */
  int K_UNSIGNED = 192;
  /** RegularExpression Id. */
  int K_VALIDATE = 193;
  /** RegularExpression Id. */
  int K_VALUE = 194;
  /** RegularExpression Id. */
  int K_VALUES = 195;
  /** RegularExpression Id. */
  int K_VARYING = 196;
  /** RegularExpression Id. */
  int K_VIEW = 197;
  /** RegularExpression Id. */
  int K_WAIT = 198;
  /** RegularExpression Id. */
  int K_WHEN = 199;
  /** RegularExpression Id. */
  int K_WHERE = 200;
  /** RegularExpression Id. */
  int K_WINDOW = 201;
  /** RegularExpression Id. */
  int K_WITH = 202;
  /** RegularExpression Id. */
  int K_WITHIN = 203;
  /** RegularExpression Id. */
  int K_WITHOUT = 204;
  /** RegularExpression Id. */
  int K_XML = 205;
  /** RegularExpression Id. */
  int K_ZONE = 206;
  /** RegularExpression Id. */
  int K_JAVA_FUNC = 207;
  /** RegularExpression Id. */
  int ST_SEMICOLON = 208;
  /** RegularExpression Id. */
  int OP_GREATERTHANEQUALS = 209;
  /** RegularExpression Id. */
  int OP_MINORTHANEQUALS = 210;
  /** RegularExpression Id. */
  int OP_NOTEQUALSSTANDARD = 211;
  /** RegularExpression Id. */
  int OP_NOTEQUALSBANG = 212;
  /** RegularExpression Id. */
  int OP_CONCAT = 213;
  /** RegularExpression Id. */
  int DT_ZONE = 214;
  /** RegularExpression Id. */
  int S_DOUBLE = 215;
  /** RegularExpression Id. */
  int S_LONG = 216;
  /** RegularExpression Id. */
  int DIGIT = 217;
  /** RegularExpression Id. */
  int S_HEX = 218;
  /** RegularExpression Id. */
  int HEX_VALUE = 219;
  /** RegularExpression Id. */
  int LINE_COMMENT = 220;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 221;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 222;
  /** RegularExpression Id. */
  int LETTER = 223;
  /** RegularExpression Id. */
  int PART_LETTER = 224;
  /** RegularExpression Id. */
  int S_CHAR_LITERAL = 225;
  /** RegularExpression Id. */
  int S_QUOTED_IDENTIFIER = 226;
  /** RegularExpression Id. */
  int ESC = 227;
  /** RegularExpression Id. */
  int REFER = 228;
  /** RegularExpression Id. */
  int WORD = 229;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"ACTION\"",
    "\"ADD\"",
    "\"ADVANCE\"",
    "\"AGAINST\"",
    "\"ALGORITHM\"",
    "\"ALL\"",
    "\"ALTER\"",
    "\"AND\"",
    "\"&&\"",
    "\"ANY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"BEGIN\"",
    "\"BETWEEN\"",
    "\"BINARY\"",
    "\"BIT\"",
    "\"BOTH\"",
    "\"BY\"",
    "\"BYTE\"",
    "\"CALL\"",
    "\"CASCADE\"",
    "\"CASE\"",
    "\"CAST\"",
    "\"CHARACTER\"",
    "\"CHANGE\"",
    "\"CHECK\"",
    "\"CHAR\"",
    "\"COLLATE\"",
    "\"COLLECTION\"",
    "\"COLUMN\"",
    "\"COLUMNS\"",
    "\"COMMIT\"",
    "\"COMMENT\"",
    "\"CONNECT\"",
    "\"CONSTRAINT\"",
    "\"CREATE\"",
    "\"CROSS\"",
    "\"CURRENT\"",
    "\"DATE\"",
    "<K_DATETIMELITERAL>",
    "<K_DATE_LITERAL>",
    "\"DEFERRABLE\"",
    "\"DELAYED\"",
    "\"DELETE\"",
    "\"DESC\"",
    "\"DESCRIBE\"",
    "\"DISABLE\"",
    "\"DISTINCT\"",
    "\"DIV\"",
    "\"DO\"",
    "\"DOUBLE\"",
    "\"DROP\"",
    "\"DUPLICATE\"",
    "\"ELSE\"",
    "\"ENABLE\"",
    "\"END\"",
    "\"ESCAPE\"",
    "\"EXCEPT\"",
    "\"EXCLUDE\"",
    "\"EXEC\"",
    "\"EXECUTE\"",
    "\"EXISTS\"",
    "\"EXPLAIN\"",
    "\"EXTRACT\"",
    "\"FETCH\"",
    "\"FIRST\"",
    "\"FALSE\"",
    "\"FLOAT\"",
    "\"FOLLOWING\"",
    "\"FOR\"",
    "\"FORCE\"",
    "\"FOREIGN\"",
    "\"FROM\"",
    "\"FULL\"",
    "\"FULLTEXT\"",
    "\"GROUP\"",
    "\"GROUPING\"",
    "\"GROUP_CONCAT\"",
    "\"HAVING\"",
    "\"HIGH_PRIORITY\"",
    "\"HOPPING\"",
    "\"IF\"",
    "\"IIF\"",
    "\"IGNORE\"",
    "\"ILIKE\"",
    "\"IN\"",
    "\"INDEX\"",
    "\"INNER\"",
    "\"INSERT\"",
    "\"INTEGER\"",
    "\"INTERSECT\"",
    "\"INTERVAL\"",
    "\"INTO\"",
    "\"IS\"",
    "\"ISNULL\"",
    "\"JOIN\"",
    "\"KEEP\"",
    "\"KEY\"",
    "\"FN\"",
    "\"LAST\"",
    "\"LATERAL\"",
    "\"LEADING\"",
    "\"LEFT\"",
    "\"LIKE\"",
    "\"LIMIT\"",
    "\"LONG\"",
    "\"LOW_PRIORITY\"",
    "\"MATCH\"",
    "\"MATCHED\"",
    "\"MATERIALIZED\"",
    "\"MERGE\"",
    "\"MINUS\"",
    "\"MODIFY\"",
    "\"NATURAL\"",
    "\"NEXT\"",
    "\"NEXTVAL\"",
    "\"NO\"",
    "\"NOCYCLE\"",
    "\"NOT\"",
    "\"NOVALIDATE\"",
    "\"NULL\"",
    "\"NULLS\"",
    "\"OF\"",
    "\"OFFSET\"",
    "\"ON\"",
    "\"ONLY\"",
    "\"OPEN\"",
    "\"OR\"",
    "\"ORDER\"",
    "\"OUTER\"",
    "\"OVER\"",
    "\"OPTIMIZE\"",
    "\"PARTITION\"",
    "\"PATH\"",
    "\"PERCENT\"",
    "\"PIVOT\"",
    "\"PLACING\"",
    "\"PRECEDING\"",
    "\"PRECISION\"",
    "\"PRIMARY\"",
    "\"PRIOR\"",
    "\"RANGE\"",
    "\"RECURSIVE\"",
    "\"REFERENCES\"",
    "\"REGEXP\"",
    "\"RLIKE\"",
    "\"REPLACE\"",
    "\"RESTRICT\"",
    "\"RETURNING\"",
    "\"RIGHT\"",
    "\"ROW\"",
    "\"ROWS\"",
    "<K_SELECT>",
    "\"SEMI\"",
    "\"SEPARATOR\"",
    "\"SESSION\"",
    "\"SET\"",
    "\"SETS\"",
    "\"SHOW\"",
    "\"SIBLINGS\"",
    "\"SIMILAR\"",
    "\"SIZE\"",
    "\"SKIP\"",
    "\"SOME\"",
    "\"START\"",
    "\"STRING\"",
    "\"TABLE\"",
    "\"TABLESPACE\"",
    "\"THEN\"",
    "\"TEMP\"",
    "\"TEMPORARY\"",
    "<K_TIME_KEY_EXPR>",
    "\"TO\"",
    "\"TOP\"",
    "\"TRAILING\"",
    "\"TRUNCATE\"",
    "\"TRUE\"",
    "\"TUMBLING\"",
    "\"TYPE\"",
    "\"UNBOUNDED\"",
    "\"UNION\"",
    "\"UNIQUE\"",
    "\"UNLOGGED\"",
    "\"UPDATE\"",
    "\"UPSERT\"",
    "\"USE\"",
    "\"SQL_CALC_FOUND_ROWS\"",
    "\"SQL_NO_CACHE\"",
    "\"USING\"",
    "\"SIGNED\"",
    "\"UNSIGNED\"",
    "\"VALIDATE\"",
    "\"VALUE\"",
    "\"VALUES\"",
    "\"VARYING\"",
    "\"VIEW\"",
    "\"WAIT\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"WINDOW\"",
    "\"WITH\"",
    "\"WITHIN\"",
    "\"WITHOUT\"",
    "\"XML\"",
    "\"ZONE\"",
    "\"$F\"",
    "\";\"",
    "<OP_GREATERTHANEQUALS>",
    "<OP_MINORTHANEQUALS>",
    "<OP_NOTEQUALSSTANDARD>",
    "<OP_NOTEQUALSBANG>",
    "<OP_CONCAT>",
    "<DT_ZONE>",
    "<S_DOUBLE>",
    "<S_LONG>",
    "<DIGIT>",
    "<S_HEX>",
    "<HEX_VALUE>",
    "<LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<S_IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "<S_CHAR_LITERAL>",
    "<S_QUOTED_IDENTIFIER>",
    "<ESC>",
    "<REFER>",
    "<WORD>",
    "\"=\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\".\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\">\"",
    "\"<\"",
    "\"@@\"",
    "\"~\"",
    "\"~*\"",
    "\"!~\"",
    "\"!~*\"",
    "\"@>\"",
    "\"<@\"",
    "\"?|\"",
    "\"?&\"",
    "\"-\"",
    "\"-#\"",
    "\"|\"",
    "\"&\"",
    "\"<<\"",
    "\">>\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"!\"",
    "\"{d\"",
    "\"}\"",
    "\"{t\"",
    "\"{ts\"",
    "\"${\"",
    "\"::\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\"->\"",
    "\"->>\"",
    "\"#>\"",
    "\"#>>\"",
    "\"IN NATURAL LANGUAGE MODE\"",
    "\"IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION\"",
    "\"IN BOOLEAN MODE\"",
    "\"WITH QUERY EXPANSION\"",
    "\"{\"",
  };

}
