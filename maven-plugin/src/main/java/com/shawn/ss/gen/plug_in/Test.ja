/**
//package com.sun.tools.javac.main;
//
//import com.sun.tools.doclint.DocLint;
//import com.sun.tools.javac.code.Lint.LintCategory;
//import com.sun.tools.javac.code.Source;
//import com.sun.tools.javac.jvm.Profile;
//import com.sun.tools.javac.jvm.Target;
//import com.sun.tools.javac.processing.JavacProcessingEnvironment;
//import com.sun.tools.javac.util.Log;
//import com.sun.tools.javac.util.Log.PrefixKind;
//import com.sun.tools.javac.util.Log.WriterKind;
//import com.sun.tools.javac.util.Options;
//import com.sun.tools.javac.util.StringUtils;
//
//import java.io.File;
//import java.io.FileWriter;
//import java.io.IOException;
//import java.io.PrintWriter;
//import java.util.Collections;
//import java.util.EnumSet;
//import java.util.Iterator;
//import java.util.LinkedHashMap;
//import java.util.Map;
//import java.util.Map.Entry;
//import java.util.Set;
//import javax.lang.model.SourceVersion;
//
//public enum Option {
//    G("-g", "opt.g", OptionKind.STANDARD, OptionGroup.BASIC),
//    G_NONE("-g:none", "opt.g.none", OptionKind.STANDARD, OptionGroup.BASIC),
//    G_CUSTOM("-g:", "opt.g.lines.vars.source", OptionKind.STANDARD, OptionGroup.BASIC,
//            ChoiceKind.ANYOF, new String[]{"lines", "vars", "source"}),
//    XLINT("-Xlint", "opt.Xlint", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XLINT_CUSTOM("-Xlint:", "opt.Xlint.suboptlist", OptionKind.EXTENDED, OptionGroup.BASIC, ChoiceKind.ANYOF,
//            getXLintChoices()), XDOCLINT("-Xdoclint", "opt.Xdoclint", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XDOCLINT_CUSTOM("-Xdoclint:", "opt.Xdoclint.subopts", "opt.Xdoclint.custom", OptionKind.EXTENDED, OptionGroup.BASIC),
//    NOWARN("-nowarn", "opt.nowarn", OptionKind.STANDARD, OptionGroup.BASIC),
//    VERBOSE("-verbose", "opt.verbose", OptionKind.STANDARD, OptionGroup.BASIC),
//    DEPRECATION("-deprecation", "opt.deprecation", OptionKind.STANDARD, OptionGroup.BASIC),
//    CLASSPATH("-classpath", "opt.arg.path", "opt.classpath", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    CP("-cp", "opt.arg.path", "opt.classpath", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    SOURCEPATH("-sourcepath", "opt.arg.path", "opt.sourcepath", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    BOOTCLASSPATH("-bootclasspath", "opt.arg.path", "opt.bootclasspath", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    XBOOTCLASSPATH_PREPEND("-Xbootclasspath/p:", "opt.arg.path", "opt.Xbootclasspath.p", OptionKind.EXTENDED, OptionGroup.FILEMANAGER),
//    XBOOTCLASSPATH_APPEND("-Xbootclasspath/a:", "opt.arg.path", "opt.Xbootclasspath.a", OptionKind.EXTENDED, OptionGroup.FILEMANAGER),
//    XBOOTCLASSPATH("-Xbootclasspath:", "opt.arg.path", "opt.bootclasspath", OptionKind.EXTENDED, OptionGroup.FILEMANAGER),
//    EXTDIRS("-extdirs", "opt.arg.dirs", "opt.extdirs", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    DJAVA_EXT_DIRS("-Djava.ext.dirs=", "opt.arg.dirs", "opt.extdirs", OptionKind.EXTENDED, OptionGroup.FILEMANAGER),
//    ENDORSEDDIRS("-endorseddirs", "opt.arg.dirs", "opt.endorseddirs", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    DJAVA_ENDORSED_DIRS("-Djava.endorsed.dirs=", "opt.arg.dirs", "opt.endorseddirs", OptionKind.EXTENDED, OptionGroup.FILEMANAGER),
//    PROC("-proc:", "opt.proc.none.only", OptionKind.STANDARD, OptionGroup.BASIC, ChoiceKind.ONEOF, new String[]{"none", "only"}),
//    PROCESSOR("-processor", "opt.arg.class.list", "opt.processor", OptionKind.STANDARD, OptionGroup.BASIC),
//    PROCESSORPATH("-processorpath", "opt.arg.path", "opt.processorpath", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    PARAMETERS("-parameters", "opt.parameters", OptionKind.STANDARD, OptionGroup.BASIC),
//    D("-d", "opt.arg.directory", "opt.d", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    S("-s", "opt.arg.directory", "opt.sourceDest", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    H("-h", "opt.arg.directory", "opt.headerDest", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    IMPLICIT("-implicit:", "opt.implicit", OptionKind.STANDARD, OptionGroup.BASIC, ChoiceKind.ONEOF, new String[]{"none", "class"}),
//    ENCODING("-encoding", "opt.arg.encoding", "opt.encoding", OptionKind.STANDARD, OptionGroup.FILEMANAGER),
//    SOURCE("-source", "opt.arg.release", "opt.source", OptionKind.STANDARD, OptionGroup.BASIC),
//    TARGET("-target", "opt.arg.release", "opt.target", OptionKind.STANDARD, OptionGroup.BASIC),
//    PROFILE("-profile", "opt.arg.profile", "opt.profile", OptionKind.STANDARD, OptionGroup.BASIC),
//    VERSION("-version", "opt.version", OptionKind.STANDARD, OptionGroup.INFO),
//    FULLVERSION("-fullversion", null, OptionKind.HIDDEN, OptionGroup.INFO),
//    DIAGS("-XDdiags=", null, OptionKind.HIDDEN, OptionGroup.INFO),
//    HELP("-help", "opt.help", OptionKind.STANDARD, OptionGroup.INFO),
//    A("-A", "opt.arg.key.equals.value", "opt.A", OptionKind.STANDARD, OptionGroup.BASIC, true),
//    X("-X", "opt.X", OptionKind.STANDARD, OptionGroup.INFO),
//    J("-J", "opt.arg.flag", "opt.J", OptionKind.STANDARD, OptionGroup.INFO, true),
//    MOREINFO("-moreinfo", null, OptionKind.HIDDEN, OptionGroup.BASIC),
//    WERROR("-Werror", "opt.Werror", OptionKind.STANDARD, OptionGroup.BASIC),
//    PROMPT("-prompt", null, OptionKind.HIDDEN, OptionGroup.BASIC),
//    DOE("-doe", null, OptionKind.HIDDEN, OptionGroup.BASIC),
//    PRINTSOURCE("-printsource", null, OptionKind.HIDDEN, OptionGroup.BASIC),
//    WARNUNCHECKED("-warnunchecked", null, OptionKind.HIDDEN, OptionGroup.BASIC),
//    XMAXERRS("-Xmaxerrs", "opt.arg.number", "opt.maxerrs", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XMAXWARNS("-Xmaxwarns", "opt.arg.number", "opt.maxwarns", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XSTDOUT("-Xstdout", "opt.arg.file", "opt.Xstdout", OptionKind.EXTENDED, OptionGroup.INFO),
//    XPRINT("-Xprint", "opt.print", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XPRINTROUNDS("-XprintRounds", "opt.printRounds", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XPRINTPROCESSORINFO("-XprintProcessorInfo", "opt.printProcessorInfo", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XPREFER("-Xprefer:", "opt.prefer", OptionKind.EXTENDED, OptionGroup.BASIC, ChoiceKind.ONEOF, new String[]{"source", "newer"}),
//    XPKGINFO("-Xpkginfo:", "opt.pkginfo", OptionKind.EXTENDED, OptionGroup.BASIC, ChoiceKind.ONEOF, new String[]{"always", "legacy", "nonempty"}),
//    O("-O", null, OptionKind.HIDDEN, OptionGroup.BASIC),
//    XJCOV("-Xjcov", null, OptionKind.HIDDEN, OptionGroup.BASIC),
//    PLUGIN("-Xplugin:", "opt.arg.plugin", "opt.plugin", OptionKind.EXTENDED, OptionGroup.BASIC),
//    XDIAGS("-Xdiags:", "opt.diags", OptionKind.EXTENDED, OptionGroup.BASIC, ChoiceKind.ONEOF, new String[]{"compact", "verbose"}),
//    XD("-XD", null, OptionKind.HIDDEN, OptionGroup.BASIC), AT("@", "opt.arg.file", "opt.AT", OptionKind.STANDARD, OptionGroup.INFO, true),
//    SOURCEFILE("sourcefile", null, OptionKind.HIDDEN, OptionGroup.INFO);
//
//    public final String text;
//    final OptionKind kind;
//    final OptionGroup group;
//    final String argsNameKey;
//    final String descrKey;
//    final boolean hasSuffix;
//    final ChoiceKind choiceKind;
//    final Map<String, Boolean> choices;
//
//    public static enum OptionKind {
//        STANDARD, EXTENDED, HIDDEN;
//
//        private OptionKind() {
//        }
//    }
//
//    static enum OptionGroup {
//        BASIC, FILEMANAGER, INFO, OPERAND;
//
//        private OptionGroup() {
//        }
//    }
//
//    static enum ChoiceKind {
//        ONEOF, ANYOF;
//
//        private ChoiceKind() {
//        }
//    }
//
//    private Option(String paramString1, String paramString2, OptionKind paramOptionKind, OptionGroup paramOptionGroup) {
//        this(paramString1, null, paramString2, paramOptionKind, paramOptionGroup, null, null, false);
//    }
//
//    private Option(String paramString1, String paramString2, String paramString3, OptionKind paramOptionKind, OptionGroup paramOptionGroup) {
//        this(paramString1, paramString2, paramString3, paramOptionKind, paramOptionGroup, null, null, false);
//    }
//
//    private Option(String paramString1, String paramString2, String paramString3, OptionKind paramOptionKind, OptionGroup paramOptionGroup, boolean paramBoolean) {
//        this(paramString1, paramString2, paramString3, paramOptionKind, paramOptionGroup, null, null, paramBoolean);
//    }
//
//    private Option(String paramString1, String paramString2, OptionKind paramOptionKind, OptionGroup paramOptionGroup, ChoiceKind paramChoiceKind, Map<String, Boolean> paramMap) {
//        this(paramString1, null, paramString2, paramOptionKind, paramOptionGroup, paramChoiceKind, paramMap, false);
//    }
//
//    private Option(String paramString1, String paramString2, OptionKind paramOptionKind, OptionGroup paramOptionGroup, ChoiceKind paramChoiceKind, String... paramVarArgs) {
//        this(paramString1, null, paramString2, paramOptionKind, paramOptionGroup, paramChoiceKind,
//                createChoices(paramVarArgs), false);
//    }
//
//    private static Map<String, Boolean> createChoices(String... paramVarArgs) {
//        LinkedHashMap localLinkedHashMap = new LinkedHashMap();
//        for (String str : paramVarArgs) {
//            localLinkedHashMap.put(str, Boolean.valueOf(false));
//        }
//        return localLinkedHashMap;
//    }
//
//    private Option(String paramString1, String paramString2, String paramString3, OptionKind paramOptionKind, OptionGroup paramOptionGroup, ChoiceKind paramChoiceKind, Map<String, Boolean> paramMap, boolean paramBoolean) {
//        this.text = paramString1;
//        this.argsNameKey = paramString2;
//        this.descrKey = paramString3;
//        this.kind = paramOptionKind;
//        this.group = paramOptionGroup;
//        this.choiceKind = paramChoiceKind;
//        this.choices = paramMap;
//        int i = paramString1.charAt(paramString1.length() - 1);
//        this.hasSuffix = ((paramBoolean) || (i == 58) || (i == 61));
//    }
//
//    public String getText() {
//        return this.text;
//    }
//
//    public OptionKind getKind() {
//        return this.kind;
//    }
//
//    public boolean hasArg() {
//        return (this.argsNameKey != null) && (!this.hasSuffix);
//    }
//
//    public boolean matches(String paramString) {
//        if (!this.hasSuffix) {
//            return paramString.equals(this.text);
//        }
//        if (!paramString.startsWith(this.text)) {
//            return false;
//        }
//        if (this.choices != null) {
//            String str1 = paramString.substring(this.text.length());
//            if (this.choiceKind == ChoiceKind.ONEOF) {
//                return this.choices.keySet().contains(str1);
//            }
//            for (String str2 : str1.split(",+")) {
//                if (!this.choices.keySet().contains(str2)) {
//                    return false;
//                }
//            }
//        }
//        return true;
//    }
//
//    public boolean process(OptionHelper paramOptionHelper, String paramString1, String paramString2) {
//        if (this.choices != null) {
//            Object localObject;
//            if (this.choiceKind == ChoiceKind.ONEOF) {
//                for (localObject = this.choices.keySet().iterator(); ((Iterator) localObject).hasNext(); ) {
//                    str1 = (String) ((Iterator) localObject).next();
//                    paramOptionHelper.remove(paramString1 + str1);
//                }
//                localObject = paramString1 + paramString2;
//                paramOptionHelper.put((String) localObject, (String) localObject);
//
//
//                String str1 = paramString1.substring(0, paramString1.length() - 1);
//                paramOptionHelper.put(str1, paramString2);
//            } else {
//                for (String str2 : paramString2.split(",+")) {
//                    String str3 = paramString1 + str2;
//                    paramOptionHelper.put(str3, str3);
//                }
//            }
//        }
//        paramOptionHelper.put(paramString1, paramString2);
//        return false;
//    }
//
//    public boolean process(OptionHelper paramOptionHelper, String paramString) {
//        if (this.hasSuffix) {
//            return process(paramOptionHelper, this.text, paramString.substring(this.text.length()));
//        }
//        return process(paramOptionHelper, paramString, paramString);
//    }
//
//    void help(Log paramLog, OptionKind paramOptionKind) {
//        if (this.kind != paramOptionKind) {
//            return;
//        }
//        paramLog.printRawLines(Log.WriterKind.NOTICE,
//                String.format("  %-26s %s", new Object[]{
//                        helpSynopsis(paramLog), paramLog
//                        .localize(Log.PrefixKind.JAVAC, this.descrKey, new Object[0])}));
//    }
//
//    private String helpSynopsis(Log paramLog) {
//        StringBuilder localStringBuilder = new StringBuilder();
//        localStringBuilder.append(this.text);
//        if (this.argsNameKey == null) {
//            if (this.choices != null) {
//                String str = "{";
//                for (Map.Entry localEntry : this.choices.entrySet()) {
//                    if (!((Boolean) localEntry.getValue()).booleanValue()) {
//                        localStringBuilder.append(str);
//                        localStringBuilder.append((String) localEntry.getKey());
//                        str = ",";
//                    }
//                }
//                localStringBuilder.append("}");
//            }
//        } else {
//            if (!this.hasSuffix) {
//                localStringBuilder.append(" ");
//            }
//            localStringBuilder.append(paramLog.localize(Log.PrefixKind.JAVAC, this.argsNameKey, new Object[0]));
//        }
//        return localStringBuilder.toString();
//    }
//
//    public static enum PkgInfo {
//        ALWAYS, LEGACY, NONEMPTY;
//
//        private PkgInfo() {
//        }
//
//        public static PkgInfo get(Options paramOptions) {
//            String str = paramOptions.get(Option.XPKGINFO);
//            return str == null ? LEGACY :
//
//                    valueOf(StringUtils.toUpperCase(str));
//        }
//    }
//
//    private static Map<String, Boolean> getXLintChoices() {
//        LinkedHashMap localLinkedHashMap = new LinkedHashMap();
//        localLinkedHashMap.put("all", Boolean.valueOf(false));
//        Lint.LintCategory localLintCategory;
//        for (localLintCategory:
//             Lint.LintCategory.values()) {
//            localLinkedHashMap.put(localLintCategory.option, Boolean.valueOf(localLintCategory.hidden));
//        }
//        for (localLintCategory:
//             Lint.LintCategory.values()) {
//            localLinkedHashMap.put("-" + localLintCategory.option, Boolean.valueOf(localLintCategory.hidden));
//        }
//        localLinkedHashMap.put("none", Boolean.valueOf(false));
//        return localLinkedHashMap;
//    }
//
//    static Set<Option> getJavaCompilerOptions() {
//        return EnumSet.allOf(Option.class);
//    }
//
//    public static Set<Option> getJavacFileManagerOptions() {
//        return getOptions(EnumSet.of(OptionGroup.FILEMANAGER));
//    }
//
//    public static Set<Option> getJavacToolOptions() {
//        return getOptions(EnumSet.of(OptionGroup.BASIC));
//    }
//
//    static Set<Option> getOptions(Set<OptionGroup> paramSet) {
//        EnumSet localEnumSet = EnumSet.noneOf(Option.class);
//        for (Option localOption : values()) {
//            if (paramSet.contains(localOption.group)) {
//                localEnumSet.add(localOption);
//            }
//        }
//        return Collections.unmodifiableSet(localEnumSet);
//    }
//}
*/